%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.2 (Build 16C32f) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1368 542
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1368 542
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HAYLWG+Helvetica
%!FontType1-1.0: HAYLWG+Helvetica 1.0000.0.0000
14 dict begin/FontName /HAYLWG+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /zero put
dup 34 /one put
dup 35 /x put
dup 36 /b put
dup 37 /a put
dup 38 /P put
dup 39 /parenleft put
dup 40 /parenright put
dup 41 /p put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<




06122801170C1528011302152801190A1C280011041C28002B2B2B2B012B2B2B2B2B2B2B2B2B81005D001716111007022120272611343712211236113402232202111417163303407C60577EFEE2FEFE7E693F7601358AA678AD9F932F48AE0598E5B1FECCFEDCBFFEEEE0BB013BF4AF0146FAE5F80152F4013BFED5FEDDDB85CB000000000100C4000002D5059200080023B10801B80133400C0404070C04079605000A47091076C418C4D5FD39003F3FF4CD313013353E013733112311C4C39A268EC003F68A1359A6FA6E03F60000000200AF000004F805BD000A001400614035690C6912790C7A12044814581468147A140407081E1110100A010E0F1E0100020A080206120C0409141431041A160F092500191516B8010BB3219589182B2B4EF44DFD3C4E10F64DFD11121739003F3F3CFD3C1012392F3CFD3C015D31305D132132161514062321112300272623211121323635AF0295C4F0D6DEFE32C70380784273FE74018C86A705BDDDC8ACFFFD9304B93A1FFE0372900000030052FFDC04470449000F003B003C00DD40382A30010A100B1B0C1C2733481069096A10073908120C09031B320724091D100C1D3B2B022E293BB73B023B322A2512100705081C2722171CB8018A4023171D1F07271D2E0B021D350B3C073C3C1C1407292AA8241A3E1B291C4A0F2738193D3EBC0197002100B9019600182B2B4EF44DEDF4ED4E10F64DE4FDC412392F003F3FED3FED3FEDED1239111217395D1112392EED2EED01111239111739313043794028363715220001192501360F2100181E1B21001620142101212200370221001A1D1721011521172101002B2B2B01103C2B2B2B2B818181005D015D2416333237363D010E010F0106070615013637363534262322070607233E01333217161511141633323637150E0123222726270E012322263534363713010E724E5F59962168326D62315301B43E150C837A8D3B210AA805F7A3BD767517250C1E112A2C265D2A160937CE7C95BDBA978ACF5A2C49A691151C060E0D1C2F67016C082C182D5C534C2A53C69B484898FD971C220303850C06422340486AB58895A41301E40000020076FFDE042505C20011001E0070402EA607A71CD71C0322080F1E02050000171D0507110A1E1D0B0B1427081A201A2E102E01290011191F208721BD5D182B2B4EF43C4DFDE4E44E10F64DED003FED3F3FED3F113911393130437940181216060A1606142601120A142601150717260113091E26002B2B012B2B8181005D1333113E01333212111402232227262715232436353426232206151417163376AF3BA460C8F9F6DA7A543239A6026691918D7BB92647C205C2FDEB4D51FEEDFEF4FEFEB03B234D897DE8BEA9DEB6D1975EB1000000020076FE5504250449000E00220074402CA908A717022808201C11


00>] def
/CharStrings 11 dict dup begin
/.notdef 0 def
/parenleft 1 def
/parenright 2 def
/zero 3 def
/one 4 def
/P 5 def
/a 6 def
/b 7 def
/p 8 def
/x 9 def
/u20B8 10 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4003230 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91B5BF8E443649147905228038171EB73F3E0B647FF27DF9EB6CBB52D184194DC83C1FA8CC47E0FA3502698ED749907FE4D5A0F8823ADB9FED67C3EB209665DC2531F3E7B9C105852DE6D94CD503F07FCE430C1EC82A169B45C5B92CFB88C2AF0E7FD994B4C83C2E1B992A4F79250273607C991600EDFE5048E8455254A2DAE4DD9D2C035441DF7495716C6B3FE39A0BE5AA3FFB6885F2E630A4F886E93249D59E38573DDEA847096EC2328E7EE929E5FDC13B7B5B3DBB5EF2EACC21C1DB477060D2AB7845171400A3B72F932B044F51D58E55FD9FA9EA5CA78E701155948C859D1CBBDE56E98702D3B2F0D04AFEBDD461895B64A04750F2BEDF43C19A426551CEDE1C016695237DDA3298DEA3C798D1FFED609B6FE4FE3645267735BDE948501EA90CD3933736408185A124BAF79C76B9D1C38FD482E025FDE39E0691861A1C01CA04E9FCB404727E6E4EA9F729C6834F33819402B71239F3174EF49CD8C4DCDC57D12CBC2FBC1C7DA466F61345B87013260E083A75CBC0DC5D5499C15321A96C95D4121AB89CE94228116D8A9A29B2F5E411F145C9A33D86D34104FB7AC5D83B521DAF526AD738856A6DEDB6109D1479D57DCF98A543C2B480953257E188CC1421AF57B4ADD5D05E24EF927E71F0CDF59D95C74482B361A0CD0689EDD0586E25DD148CF62FBD244F0862DDD80F8FB7B15C051574CB0413DB488D673F24E89ABB138429992BFD4F020F674137E670C653077CC9F62227AD44F6512A5E00CAF16A
E7ABC85E73C5D100CD33AEADEDFE48A45672118907CBD0A1BDBE73964D48F5647338182DF4DA28F3ACA88E60ACD54612F4E1A3FA47A0BDD0A05A58FB4478A37C3B2FF893457993F2DEDB576D858F9393C76E26D9D530D289B4366E0D0BD31D758288A87E4BE6B77071D3721960FB9750AF30349275AC7125173A5FBAF32FA178A59925890B8C123870E62F011DB274D32EFE71B5614449A6708707418EDF24F4DA75548C5B9D05050B3FA37F96F87E86B46B26149E39043C3663B0ADEE5285482F6A04B66C3708E12E8D14B622425E4EEF8CD22C34CFDADCD83AC2CB431797107B25C5A60232D6AEAF5F8AEAAA80B557FDE4D084871D7D6511AB224A7EC2292265B9EE43D77218524AF9C7878995459EB3EBE27D7D65D809074DC1C3957CB4796EDB179F0C5B9A401EBC844E5FE8697A9735BAD05C138C25BD32D6C961C46DE0AE98D223CFB9E49A488B56BE3B8B3185DCA85A8364CBE9A1BEBB226C3B0DED0B14C53BD49936B76903490631C7A5E1E6AE39EEC4C6F7A7C94C1104F373EB4826B397073826BF89933AE41D8D59361DC6A15B01F8EF4777A550E5A087F17AA5222F8F9B0B99FBB646C94FFC3918DF09B4B2122610276912977356AF76AD78C1A621D3E12AE871DB1FA35E6E9BAF79E5D28A02D30BF89B3E1AC89705BB0AD563362D1FFF249F0F7C36EBEDC6E284B18473405C50E5C68E26B4763D0FF7D1B79F86BA1992722FE873B3B5FE9242C26E0B4A370123DA18D7DD13B5E9D00834045EC4863EC33F4767740814A6320B3076D95B9E2EFAB2BF662F1B8F7E6CDE85F2521F6E9D5930CA3AEFE6B3BDE5DA721C1A27A84B99FEE75A617A249BA5DA5789386C779096E86117441F2CD90881706A3FFB28EA2E89CFEDCFEF484654B2F374FABE4B5489A3C222E8F0A260C8E4FEA3CDD616DD7FFA77D9C35AC41B56F6908A3164DA3F2A6AA3172E0802C5155920F5265AEE8A8983B8B745408E6395C42EFFA7C5D90548F98E30147A771391F653A1D383A3003F8401287834D5801773508BC9D0F3587E8871A4498C7774540279112C3C956CD9E863B6510F0D33B47CBF293445E65E30A94ED4F2FDDDFCFAC96B3E4130FA3C7F0F12BA88134BB88933884938EFBB0358DCF615373EAFC8B04BCB7535D9848C7917553B9035813A40A78F4E21A64F3854CCCA422C936A9A0FA19AD3512877D63D64C1B1B33E9547919A551C36F80516204714FA01FE784EAA66387F894715E378DF5328C14758C1F9B87929E54136C5F398BE2D78BB2296C08D00FC46F41CD293A6FBEBDB92AE6FE861055FC6C41C2899F0AE76A384C5B8102882D77CB9C3B1615CFEE9FE9015DF3E6520E74973ACCC38394F5A0A3016DAEA550D850139371BA0DED6090568F544962A6D5EA7C5AFBFDC7E5AA8945A27AC73D81923818EFCF4CC1A2B79D49079148A48ECCBF89B
463936EFEAA36EBD931F5F80F0F8CF4B5EF4BD299300D7BCC910899261899BF2D12901FECD302C2678CB11801AFC27E4257B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HAYLWG+Helvetica cguidfix
/F1.1/HAYLWG+Helvetica renmfont
%RBIBeginFontSubset: LQQTLE+Helvetica-Oblique
%!FontType1-1.0: LQQTLE+Helvetica-Oblique 1.0000.0.0000
14 dict begin/FontName /LQQTLE+Helvetica-Oblique def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /b put
dup 34 /space put
dup 35 /hyphen put
dup 36 /a put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1910 1 index div -985 2 index div 3218 3 index div 2331 5 -1 roll div]cvx def
/sfnts [<






00>] def
/CharStrings 6 dict dup begin
/.notdef 0 def
/space 1 def
/hyphen 2 def
/a 3 def
/b 4 def
/u20B8 5 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1910 -985 3218 2331}def
/UniqueID 4162838 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C96AC05D8620AE2086072F250ADD3256490B02A185DDD3083C39A0A37A537BC048639785B6E55CAAB044EE668E4A3C4EAFC1FBF3D12464C49CFF3BE3B8621044371ABF5F5343CE290DDD1CB20612234D5FD84AA72CEDD1B22DCC70F7D932B3A9BEA84BBBFA3DD40B1B681A89AD8FB6A8B815FB4BCF03B98A459DEDCDBC0C1DEE2E7E1CEDE1D595827B6171214914FFC5232FD5D43F04C7A6740549A9559270F288BC099C5DA81F452E312D36687B94484E38DA4E3A601860829F7D1AA1E0F206610B00BDF10A530AA0C7B91876411551F3AEBB7057D889248177D8C474739D40E4CB880D60956B701BB4A1000F493ED4252AFDC5FC947702646F5AB4AFBB649DA3CD957470EBCAAA8B01E36EF77AC1FDA67740082D4BA5AB183598C55AE555DDBBFC63AC176FA6DAC40C28AEE74B0383C4119036C793C855819C4519B12A5B6EAE88C25AB8B4D0F364F1D29103B464167824F68BE25F0C4AAFFAAB71ED6B391E8272DE004C74E77AB4FE4D366ACBAC1C5F53E8FC9FE51D9722FCD0850368192F52AEFA1D8A6E22CCEDA7955E4EB2061009DFCA15A5B9710E61CAD328B1834A4C21F22961D19ABBDEE0D5584E981D56902D450977D0D0043C617D34885A29810F0101788A78FCA308A74D1EAD63ED117D16213E9884C7417BCA7C93EFF21F5420CFEC9866ECA2C4CE05371C72CCE56CF951922FF45E096AD814C76C1595970B92471C945D97B651CF27C720963E81EFFCF0BB1B4980AD58EC22FC6637AD41E6FE0D6
4F8646F9B8172CC938FC4191EF9ECB2829E6C44DAD731E73BBAE5300F188D8BC9D3E86D5D62BC6715A3B51C04BDA9035A6D1021A58D8D6B0F68296D880408517C860763CAA3A2158A9D4857E3F6BD3C03BF0166C0DFC9305395BC68169B5304CB12137BAD374358F45A52EC5AB39445A611EC5C041CF0C979ACB2A0DD96F6A3CC9DB6D4E29C5B0863B88365199C2A8BBD92B767498F81DB36D857D298639766463FFAA4805483AB29883D87D2AEC2816DD072CC162525F777D5C053ECF8059832ED31F5585F8132CC20046D698904B8093B60093FAF773519B3D83D7610871DDB209BA7BA95CCEBB1DF8A7166096420522CA715A582781CA36ED4194933EFE138948F41C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/LQQTLE+Helvetica-Oblique cguidfix
/F2.1/LQQTLE+Helvetica-Oblique renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
2 J
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 0 1367.9811 541.41736 rc
1 0 0 -1 -141.73228 683.14966 cm
933.55768 214.06595 m
1500.0586 214.06595 l
1500.0586 596.90619 l
933.55768 596.90619 l
h
933.55768 214.06595 m
S
236.63799 214.06595 m
803.75494 214.06595 l
803.75494 595.40857 l
236.63799 595.40857 l
h
236.63799 214.06595 m
S
0.02834646 w
0 J
1 j
4 M
1216.9246 597.05402 m
933.45996 597.05402 l
933.45996 214.37679 l
1500.3892 214.37679 l
1500.3892 597.05402 l
1216.9246 597.05402 l
h
1216.9246 597.05402 m
S
1.417323 w
933.45996 597.05402 m
933.45996 611.22723 l
S
933.45996 597.05402 m
919.28674 597.05402 l
S
2.834646 w
0 0.60000002 1 sc
924.95599 597.05402 m
1109.208 597.05402 l
S
1109.208 599.88861 m
1321.8065 217.21143 l
S
1321.8065 214.37679 m
1506.0585 214.37679 l
S
1.417323 w
1321.8065 599.88861 m
1321.8065 585.48865 l
S
1321.8065 571.08862 m
1321.8065 556.68866 l
S
1321.8065 542.28864 m
1321.8065 527.88861 l
S
1321.8065 513.48865 m
1321.8065 499.08862 l
S
1321.8065 484.68863 m
1321.8065 470.28864 l
S
1321.8065 455.88861 m
1321.8065 441.48862 l
S
1321.8065 427.08862 m
1321.8065 412.68863 l
S
1321.8065 398.2886 m
1321.8065 383.88861 l
S
1321.8065 369.48862 m
1321.8065 355.08862 l
S
1321.8065 340.6886 m
1321.8065 326.2886 l
S
1321.8065 311.88861 m
1321.8065 297.48862 l
S
1321.8065 283.08859 m
1321.8065 268.6886 l
S
1321.8065 254.2886 m
1321.8065 239.8886 l
S
1321.8065 225.4886 m
1321.8065 217.21143 l
S
0.02834646 w
0 0 0 sc
520.29431 595.64471 m
236.82968 595.64471 l
236.82968 212.9675 l
803.75891 212.9675 l
803.75891 595.64471 l
520.29431 595.64471 l
h
520.29431 595.64471 m
S
1.417323 w
236.82968 595.64471 m
236.82968 609.81793 l
S
236.82968 595.64471 m
222.65645 595.64471 l
S
236.82968 340.52658 m
222.65645 340.52658 l
S
2.834646 w
0 0.60000002 1 sc
236.82968 595.64471 m
406.90845 595.64471 l
S
1 1 1 sc
CM
272.26279 81.835663 m
270.95883 81.835663 269.85333 82.119125 268.71948 82.771095 c
267.5856 83.451408 266.7919 84.24511 266.1116 85.378967 c
265.45963 86.512825 265.17618 87.61834 265.17618 88.922279 c
265.17618 90.226212 265.45963 91.331726 266.1116 92.465584 c
266.7919 93.599442 267.5856 94.393143 268.71948 95.073463 c
269.85333 95.725426 270.95883 96.008896 272.26279 96.008896 c
273.56671 96.008896 274.67224 95.725426 275.80609 95.073463 c
276.93994 94.393143 277.73364 93.599442 278.41397 92.465584 c
279.06592 91.331726 279.3494 90.226212 279.3494 88.922279 c
279.3494 87.61834 279.06592 86.512825 278.41397 85.378967 c
277.73364 84.24511 276.93994 83.451408 275.80609 82.771095 c
274.67224 82.119125 273.56671 81.835663 272.26279 81.835663 c
272.26279 81.835663 l
h
272.26279 81.835663 m
f
0.02834646 w
0 0.60000002 1 sc
1 0 0 -1 -141.73228 683.14966 cm
413.99506 601.31403 m
412.69113 601.31403 411.5856 601.03052 410.45175 600.37854 c
409.3179 599.69824 408.5242 598.90454 407.84387 597.77069 c
407.19193 596.63684 406.90845 595.53131 406.90845 594.22742 c
406.90845 592.92346 407.19193 591.81793 407.84387 590.68408 c
408.5242 589.55023 409.3179 588.75653 410.45175 588.07623 c
411.5856 587.42426 412.69113 587.14075 413.99506 587.14075 c
415.29901 587.14075 416.40451 587.42426 417.53836 588.07623 c
418.67224 588.75653 419.46594 589.55023 420.14624 590.68408 c
420.79822 591.81793 421.08167 592.92346 421.08167 594.22742 c
421.08167 595.53131 420.79822 596.63684 420.14624 597.77069 c
419.46594 598.90454 418.67224 599.69824 417.53836 600.37854 c
416.40451 601.03052 415.29901 601.31403 413.99506 601.31403 c
413.99506 601.31403 l
h
413.99506 601.31403 m
S
1 1 1 sc
CM
484.83289 81.864006 m
483.52896 81.864006 482.42343 82.147476 481.28958 82.799446 c
480.15573 83.479759 479.36203 84.27346 478.6817 85.407318 c
478.02972 86.541176 477.74628 87.64669 477.74628 88.950623 c
477.74628 90.254562 478.02972 91.360077 478.6817 92.493935 c
479.36203 93.627792 480.15573 94.421494 481.28958 95.101807 c
482.42343 95.753777 483.52896 96.037239 484.83289 96.037239 c
486.13681 96.037239 487.24234 95.753777 488.37619 95.101807 c
489.51004 94.421494 490.30374 93.627792 490.98407 92.493935 c
491.63605 91.360077 491.91949 90.254562 491.91949 88.950623 c
491.91949 87.64669 491.63605 86.541176 490.98407 85.407318 c
490.30374 84.27346 489.51004 83.479759 488.37619 82.799446 c
487.24234 82.147476 486.13681 81.864006 484.83289 81.864006 c
484.83289 81.864006 l
h
484.83289 81.864006 m
f
0 0.60000002 1 sc
1 0 0 -1 -141.73228 683.14966 cm
626.56519 601.28564 m
625.26123 601.28564 624.1557 601.0022 623.02185 600.35022 c
621.888 599.66992 621.0943 598.87622 620.414 597.74237 c
619.76202 596.60852 619.47858 595.50299 619.47858 594.19904 c
619.47858 592.89508 619.76202 591.78961 620.414 590.65576 c
621.0943 589.52185 621.888 588.72815 623.02185 588.04785 c
624.1557 587.39587 625.26123 587.11243 626.56519 587.11243 c
627.86908 587.11243 628.97461 587.39587 630.10846 588.04785 c
631.24231 588.72815 632.03601 589.52185 632.71637 590.65576 c
633.36829 591.78961 633.65179 592.89508 633.65179 594.19904 c
633.65179 595.50299 633.36829 596.60852 632.71637 597.74237 c
632.03601 598.87622 631.24231 599.66992 630.10846 600.35022 c
628.97461 601.0022 627.86908 601.28564 626.56519 601.28564 c
626.56519 601.28564 l
h
626.56519 601.28564 m
S
CM
272.23444 336.98215 m
270.93051 336.98215 269.82498 337.26562 268.69113 337.91757 c
267.55728 338.5979 266.76358 339.3916 266.08325 340.52545 c
265.43127 341.6593 265.14783 342.76483 265.14783 344.06876 c
265.14783 345.37271 265.43127 346.47821 266.08325 347.61206 c
266.76358 348.74594 267.55728 349.53964 268.69113 350.21994 c
269.82498 350.87192 270.93051 351.15536 272.23444 351.15536 c
273.53836 351.15536 274.64389 350.87192 275.77774 350.21994 c
276.91159 349.53964 277.70529 348.74594 278.38562 347.61206 c
279.0376 346.47821 279.32104 345.37271 279.32104 344.06876 c
279.32104 342.76483 279.0376 341.6593 278.38562 340.52545 c
277.70529 339.3916 276.91159 338.5979 275.77774 337.91757 c
274.64389 337.26562 273.53836 336.98215 272.23444 336.98215 c
272.23444 336.98215 l
h
272.23444 336.98215 m
f
1 0 0 -1 -141.73228 683.14966 cm
413.96671 346.16751 m
412.66278 346.16751 411.55725 345.88406 410.4234 345.23209 c
409.28955 344.55176 408.49585 343.75806 407.81552 342.62421 c
407.16357 341.49036 406.8801 340.38483 406.8801 339.0809 c
406.8801 337.77698 407.16357 336.67145 407.81552 335.5376 c
408.49585 334.40375 409.28955 333.61005 410.4234 332.92972 c
411.55725 332.27774 412.66278 331.99429 413.96671 331.99429 c
415.27066 331.99429 416.37616 332.27774 417.51001 332.92972 c
418.64389 333.61005 419.43759 334.40375 420.11789 335.5376 c
420.76987 336.67145 421.05331 337.77698 421.05331 339.0809 c
421.05331 340.38483 420.76987 341.49036 420.11789 342.62421 c
419.43759 343.75806 418.64389 344.55176 417.51001 345.23209 c
416.37616 345.88406 415.27066 346.16751 413.96671 346.16751 c
413.96671 346.16751 l
h
413.96671 346.16751 m
S
CM
484.83289 336.98215 m
483.52896 336.98215 482.42343 337.26562 481.28958 337.91757 c
480.15573 338.5979 479.36203 339.3916 478.6817 340.52545 c
478.02972 341.6593 477.74628 342.76483 477.74628 344.06876 c
477.74628 345.37271 478.02972 346.47821 478.6817 347.61206 c
479.36203 348.74594 480.15573 349.53964 481.28958 350.21994 c
482.42343 350.87192 483.52896 351.15536 484.83289 351.15536 c
486.13681 351.15536 487.24234 350.87192 488.37619 350.21994 c
489.51004 349.53964 490.30374 348.74594 490.98407 347.61206 c
491.63605 346.47821 491.91949 345.37271 491.91949 344.06876 c
491.91949 342.76483 491.63605 341.6593 490.98407 340.52545 c
490.30374 339.3916 489.51004 338.5979 488.37619 337.91757 c
487.24234 337.26562 486.13681 336.98215 484.83289 336.98215 c
484.83289 336.98215 l
h
484.83289 336.98215 m
f
1 0 0 -1 -141.73228 683.14966 cm
626.56519 346.16751 m
625.26123 346.16751 624.1557 345.88406 623.02185 345.23209 c
621.888 344.55176 621.0943 343.75806 620.414 342.62421 c
619.76202 341.49036 619.47858 340.38483 619.47858 339.0809 c
619.47858 337.77698 619.76202 336.67145 620.414 335.5376 c
621.0943 334.40375 621.888 333.61005 623.02185 332.92972 c
624.1557 332.27774 625.26123 331.99429 626.56519 331.99429 c
627.86908 331.99429 628.97461 332.27774 630.10846 332.92972 c
631.24231 333.61005 632.03601 334.40375 632.71637 335.5376 c
633.36829 336.67145 633.65179 337.77698 633.65179 339.0809 c
633.65179 340.38483 633.36829 341.49036 632.71637 342.62421 c
632.03601 343.75806 631.24231 344.55176 630.10846 345.23209 c
628.97461 345.88406 627.86908 346.16751 626.56519 346.16751 c
626.56519 346.16751 l
h
626.56519 346.16751 m
S
2.834646 w
421.08167 340.52658 m
619.5069 340.52658 l
S
633.68011 595.64471 m
803.75891 595.64471 l
S
1.417323 w
415.41238 346.19586 m
415.41238 360.59586 l
S
415.41238 374.99588 m
415.41238 389.39587 l
S
415.41238 403.79587 m
415.41238 418.19586 l
S
415.41238 432.59589 m
415.41238 446.99588 l
S
415.41238 461.39587 m
415.41238 475.79587 l
S
415.41238 490.19589 m
415.41238 504.59589 l
S
415.41238 518.99591 m
415.41238 533.39587 l
S
415.41238 547.7959 m
415.41238 562.19586 l
S
415.41238 576.59589 m
415.41238 587.14075 l
S
628.0108 587.14075 m
628.0108 572.74078 l
S
628.0108 558.34076 m
628.0108 543.9408 l
S
628.0108 529.54077 m
628.0108 515.14075 l
S
628.0108 500.74075 m
628.0108 486.34076 l
S
628.0108 471.94077 m
628.0108 457.54077 l
S
628.0108 443.14075 m
628.0108 428.74075 l
S
628.0108 414.34076 m
628.0108 399.94077 l
S
628.0108 385.54074 m
628.0108 371.14075 l
S
628.0108 356.74075 m
628.0108 346.19586 l
S
0 0 0 sc
236.82968 340.52658 m
238.24701 340.52658 l
S
251.20134 340.52658 m
252.61867 340.52658 l
S
265.573 340.52658 m
266.99033 340.52658 l
S
279.94464 340.52658 m
281.36197 340.52658 l
S
294.31631 340.52658 m
295.73364 340.52658 l
S
308.68796 340.52658 m
310.10529 340.52658 l
S
323.05963 340.52658 m
324.47693 340.52658 l
S
337.43127 340.52658 m
338.8486 340.52658 l
S
351.80292 340.52658 m
353.22025 340.52658 l
S
366.17459 340.52658 m
367.59192 340.52658 l
S
380.54623 340.52658 m
381.96356 340.52658 l
S
394.91791 340.52658 m
396.33521 340.52658 l
S
0 i
/F1.1[ 36.000004 0 0 -36.000004 0 0]sf
209.64543 640.48883 m
(!)s
/F1.1[ 33.647247 0 0 -33.647247 0 0]sf
173.33362 329.41476 m
(")s
0.60000002 i
CM
6.2595997 343.13333 m
75.141495 343.13333 l
75.141495 341.46088 l
6.2595997 341.46088 l
h
6.2595997 343.13333 m
f
0 i
1 0 0 -1 -141.73228 683.14966 cm
/F2.1[ 33.647247 0 0 -33.647247 0 0]sf
150.14621 373.63522 m
(!"#)[ 18.712996 9.348283 0.000000 ] xS
196.52103 373.63522 m
($)s
/F1.1[ 48 0 0 -48 0 0]sf
1474.4167 639.63458 m
(#)s
1307.691 653.16919 m
($)s
1095.5394 653.16919 m
(%)s
/F1.1[ 36 0 0 -36 0 0]sf
907.8006 644.10394 m
(!)s
/F1.1[ 48 0 0 -48 0 0]sf
786.04797 640.51001 m
(#)s
615.07837 646.92944 m
($)s
402.92676 646.92944 m
(%)s
954.48389 275.81311 m
(&'#\()[ 32.015625 15.984375 24.000000 0.000000 ] xS
263.26822 266.53287 m
(\)'#\()[ 26.695312 15.984375 24.000000 0.000000 ] xS
/F1.1[ 36 0 0 -36 0 0]sf
907.8006 244.7597 m
(")s
ep
end
%%Trailer
%%EOF
